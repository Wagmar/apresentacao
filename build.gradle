buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath 'org.springframework.boot:spring-boot-gradle-plugin:2.1.9.RELEASE'
	}
}


plugins {
	id 'java'
	id 'jacoco'
	id 'groovy'
	id "org.asciidoctor.convert" version "1.5.9.2"
	id 'nebula.integtest' version '5.0.0'
	id 'nebula.release' version '13.0.0'
	id 'nebula.lint' version '9.3.4'
	id 'org.sonarqube' version '2.6.2'
}
apply {
	 plugin 'org.springframework.boot'
	 plugin 'io.spring.dependency-management'
}


ext {
	set('snippetsDir', file("build/generated-snippets"))
	guavaVersion = '27.0.1-jre'
	mybatisVersion = '3.4.6'
	mybatisSpringBootVersion = '1.3.2'
	slog4jVersion = '0.11.0'
	spockFrameworkVersion = '1.2-groovy-2.5'
	spockReportsVersion = '1.6.1'
}
ext['spring-restdocs.version'] = '2.0.4.RELEASE'

group = 'com.exemplo'
sourceCompatibility = '1.8'

configurations {
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}
	compileOnly {
		extendsFrom annotationProcessor
	}
}

dependencyManagement {
	dependencies {
		dependencySet(group: 'org.spockframework', version: spockFrameworkVersion) {
			entry 'spock-core'
			entry 'spock-spring'
		}
	}
}

repositories {
	mavenCentral()
}


dependencies {
	asciidoctor 'org.springframework.restdocs:spring-restdocs-asciidoctor'
	implementation ('org.springframework.boot:spring-boot-starter-actuator')
	implementation ('org.springframework.boot:spring-boot-starter-web')
	implementation ('org.mybatis.spring.boot:mybatis-spring-boot-starter:2.1.0')
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

	compile(
		    [group: 'org.springframework', name: 'spring-jdbc'],
		    [group: 'org.mybatis', name: 'mybatis', version: mybatisVersion],
			[group: 'org.mybatis.spring.boot', name: 'mybatis-spring-boot-starter', version: mybatisSpringBootVersion],
			[group: 'org.slf4j', name: 'slf4j-api'],
			[group: 'org.slog4j', name: 'slog4j', version: slog4jVersion],
			[group: 'com.google.guava', name: 'guava', version: guavaVersion]
	)

	runtime(
			[group: 'mysql', name: 'mysql-connector-java', version: '5.1.48'],
			[group: 'org.springframework.boot', name: 'spring-boot-starter-undertow']
	)

	integTestRuntime(
			[group: 'org.apache.derby', name: 'derby'],
	)

    compileOnly(
			[group: 'org.projectlombok', name: 'lombok']
	)

	developmentOnly ('org.springframework.boot:spring-boot-devtools')

	annotationProcessor ('org.projectlombok:lombok')

	testImplementation ('org.springframework.boot:spring-boot-starter-test')

	testImplementation ('org.springframework.restdocs:spring-restdocs-mockmvc')

	testCompile(
			[group: 'org.projectlombok', name: 'lombok'],
			[group: 'org.spockframework', name: 'spock-core'],
			[group: 'org.spockframework', name: 'spock-spring'],
	)

	testRuntime(
			[group: 'com.athaydes', name: 'spock-reports', version: spockReportsVersion]
	)

}

springBoot {
	// to create META-INF/build-info.properties. Its contents are exported by /info
	buildInfo()
}
//
tasks.withType(Test) {
	jacoco {
		destinationFile = file("$buildDir/jacoco/test.exec")
	}
	finalizedBy jacocoTestReport
}

check.dependsOn tasks.withType(Test)

jacocoTestReport {
	reports {
		xml.enabled true
	}
}

test {
	outputs.dir snippetsDir
}

asciidoctor {
	inputs.dir snippetsDir
	dependsOn test
	dependsOn integrationTest
//	attributes revnumber : version.toString()
	setAttributes([username : 'teste', revnumber : version.toString()])

}

gradleLint {
	alwaysRun = false
	rules += ['duplicate-dependency-class']
}

tasks.withType(Test) {
	jvmArgs '-noverify', '-XX:TieredStopAtLevel=1',
			'-Duser.timezone=America/Sao_Paulo',
			'-Dio.netty.leakDetectionLevel=ADVANCED'
	jacoco {
		destinationFile = file("$buildDir/jacoco/test.exec")
	}
	finalizedBy jacocoTestReport
}

check.dependsOn tasks.withType(Test)

jacocoTestReport {
	reports {
		xml.enabled true
	}
}

bootJar {
	dependsOn asciidoctor

	processResources {
		from ("${asciidoctor.outputDir}/html5") {
			into 'static/docs'
		}
	}
}

sonarqube {
	properties {
		property 'sonar.projectName', "$name"
		property 'sonar.projectKey', "$group:apresentacao"
	}
}


apply plugin: 'maven-publish'

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	repositories {
		maven {
			url rctiReleasesRepo
			credentials {
				username "${project.properties.deployerUsername}"
				password "${project.properties.deployerPassword}"
			}
		}
	}
}


